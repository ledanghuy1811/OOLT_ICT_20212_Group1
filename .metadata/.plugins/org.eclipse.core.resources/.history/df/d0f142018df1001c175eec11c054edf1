package algorithms;

import java.util.LinkedList;
import graph.*;

public class BFS extends Algorithms {
	private LinkedList<Vertex> adj[] = new LinkedList[this.getNumVertex()];
	private Vertex source;
	
	//constructor
	public BFS() {
		
	}
	public BFS(Graph graph, int numVertex, int numEdge, Vertex source) {
		super(graph, numVertex, numEdge);
		this.source = source;
	}
	
	//setter and getter
	public void setAdj() {
		for(int i = 0; i < this.getNumVertex(); i++) {
			adj[i] = new LinkedList();
			for(Vertex v : this.getGraph().getAdjacent(i)) {
				adj[i].add(v);
			}
		}
	}
	public LinkedList<Vertex>[] getAdj() {
		return adj;
	}
	public Vertex getSource() {
		return source;
	}
	
	//override method
	@Override
	public void excute() {
		// Mark all the vertices as not visited(By default
        // set as false)
		boolean visited[] = new boolean [this.getNumVertex()];
		
		// Create a queue for BFS
		LinkedList<Vertex> queue = new LinkedList<Vertex>();
		
		// Mark the current node as visited and enqueue it
		visited[]
	}
}
