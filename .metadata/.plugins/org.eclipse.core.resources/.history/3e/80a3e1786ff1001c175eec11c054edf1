package graph;

import java.util.*;

public class Graph {
	public static final int MAX_NUMBERS_EDGE = 1000;
	
	// attribute
	private ArrayList<Vertex> vertex = new ArrayList<Vertex>();
	private ArrayList<Edge> edge = new ArrayList<Edge>();
	private boolean isDirected;
	
	//constructor
	public Graph() {
		
	}
	public Graph(boolean isDirected) {
		this.isDirected = isDirected;
	}
	
	//getter
	public ArrayList<Vertex> getVertex() {
		return this.vertex;
	}
	public ArrayList<Edge> getEdge() {
		return this.edge;
	}
	public boolean getIsDirected() {
		return this.isDirected;
	}
	
	// method
	public void addVertex(int vertex) {
		Vertex temp = new Vertex(vertex);
		this.vertex.add(temp);
	}
	public void addEdge(int source, int target, boolean flag, double weight) {
		Edge temp;
		if(flag) 
			temp = new Edge(source, target, flag, weight);
		else
			temp = new Edge(source, target, flag);
		this.edge.add(temp);
	}
	public ArrayList<Vertex> getAdjacent(Vertex vertex) {
		ArrayList<Vertex> temp = new ArrayList<Vertex>();
		for(Edge edge: this.getEdge()) {
			
		}
	}
}
